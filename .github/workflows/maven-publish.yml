# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

# trigger
on:
  push:
    branches:
      - dev
      - "releases/**"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml')}}
        restore-keys: |
          ${{ runner.os }}-m2-
          ${{ runner.os }}-
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=BinaryTreeNode_ESTools -Dmaven.test.skip=true
    - name: Build with Maven
      run: mvn -B package --file pom.xml -Dmaven.test.skip=true
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ESTools artifact
        path: target/
    - name: "remove snapshot version"
      run: |
        if mvn -q -Dexec.executable=\"echo\" -Dexec.args='${project.version}' --non-recursive exec:exec | grep -q \"SNAPSHOT\"; then
            mvn versions:set -DremoveSnapshot;
        fi;

  test:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          cache: 'maven'
          architecture: x64
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-test-${{ hashFiles('**/pom.xml')}}
          restore-keys: |
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - run: |
          mvn clean test -Dmaven.repo.local=.repo

  deploy-job1:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo 'deploy job1'

  deploy-job2:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo 'deploy job2'
